<h2>Playground for &lt;{{ npmPackage.name }}&gt; component</h2>
<hr/>
<h3>Settings</h3>
<form id="settings">
    <fieldset id="attributes">
        <legend>Attributes</legend>
        {% for attr in manifest.modules[0].declarations[0].attributes %}
                <label for="{{attr.name}}">{{attr.name | upper }}</label>
                <input name="{{attr.name}}" id="{{attr.name}}" />
        {% else %}
        <p>The list of attribues of this component could not be retrieved.</p>
        {% endfor %}
    </fieldset>
    <fieldset id="content">
        <legend>Content</legend>
        <label for="innerHTML">innerHTML</label>
        <textarea id="innerHTML" name="innerHTML" rows="8" placeholder="Enter your message here"></textarea>
    </fieldset>
    <div id="submit">
        <span></span><button type="submit" method= "GET">Share</button>
    </div>
</form>
<hr/>
<h3>Live preview</h3>
<article class="demo">
<output id="{{ id }}">
  <div class="live"><span>html</span><svg id="copy-code" xmlns="http://www.w3.org/2000/svg" title="Copy code" data-code="" onclick="window.navigator.clipboard.writeText(atob(this.dataset.code));" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
  <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"></path>
  <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"></path>
</svg>
</div>
    <pre>&lt;{{ id }}&gt;&lt;/{{ id }}&gt;</pre>
    <div class="live">preview</div>
    <{{ id }}></{{ id }}>
</output>
</article>
<script>
    const form = document.querySelector("#settings");
    const output = document.querySelector("#{{ id }}");
    const svg = document.querySelector("#copy-code");
    // should initialize code to copy?
    form.addEventListener('keyup', evt => {
        // create ed-component from form data
        const formData = new FormData(form);
        
        let edComponent = document.createElement(output.id);

        for (let [k, v] of formData.entries()) {
            edComponent[k] = k === 'innerHTML' ? `\n${v}\n`: v;
        }
        const htmlString = edComponent.outerHTML;
        const htmlBytes = btoa(htmlString);
        svg.dataset.code = htmlBytes;
        output.children[1].innerText = htmlString;

        output.replaceChild(edComponent, output.children[3])
        }
    )

</script>