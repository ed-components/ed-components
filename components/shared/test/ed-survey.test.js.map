{
    "version": 3,
    "file": "ed-num.test.js",
    "sourceRoot": "",
    "sources": [
        "../../test/ed-num.test.ts"
    ],
    "names": [],
    "mappings": "AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAEnD,OAAO,qBAAqB,CAAC;AAE7B,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;;QAC3E,MAAM,EAAE,GAAG,MAAM,OAAO,CAAW,yBAAyB,CAAC,CAAC;QAC9D,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACnD,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnC,MAAM,CACJ,MAAA,EAAE,CAAC,UAAU,0CACT,aAAa,CAAC,WAAW,EAC1B,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAChD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,QAAQ,GAAG,gBAAgB,CAAC;QAClC,MAAM,EAAE,GAAG,MAAM,OAAO,CAAW,cAAc,QAAQ,cAAc,CAAC,CAAC;QACzE,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvC,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvD,mDAAmD;QACnD,kCAAkC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAW,uCAAuC,CAAC,CAAC;QAC5E,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnC,wEAAwE;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,EAAE,GAAG,MAAM,OAAO,CAAW,yBAAyB,CAAC,CAAC;QAC9D,MAAM,MAAM,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",
    "sourcesContent": [
        "import { fixture, expect } from \"@open-wc/testing\";\nimport { EdSurvey } from \"../src/EdSurvey.js\";\nimport \"../src/ed-num.js\";\n\ndescribe(\"EdSurvey\", () => {\n  it('has a default question \"How are you today?\" and type smiley', async () => {\n    const el = await fixture<EdSurvey>(`<ed-num></ed-num>`);\n    expect(el.question).to.equal(\"How are you today?\");\n    expect(el.type).to.equal(\"smiley\");\n    expect(\n      el.shadowRoot\n        ?.querySelector(\"ed-smiley\")\n        .shadowRoot.querySelectorAll(\"button\").length,\n    ).to.equal(3);\n  });\n\n  it(\"innerHTML is used as question\", async () => {\n    const question = \"Does it works?\";\n    const el = await fixture<EdSurvey>(`<ed-num>${question}</ed-num>`);\n    expect(el.question).to.equal(question);\n    expect(el.getAttribute(\"question\")).to.equal(question);\n    // el.shadowRoot!.querySelector('button')!.click();\n    // expect(el.counter).to.equal(6);\n  });\n\n  it(\"can override the type via attribute\", async () => {\n    const el = await fixture<EdSurvey>(`<ed-num type=\"rating\"></ed-num>`);\n    expect(el.type).to.equal(\"rating\");\n    // expect(el.shadowRoot?.querySelectorAll('button').length).to.equal(5);\n  });\n\n  it(\"passes the a11y audit\", async () => {\n    const el = await fixture<EdSurvey>(`<ed-num></ed-num>`);\n    await expect(el).shadowDom.to.be.accessible();\n  });\n});\n"
    ]
}